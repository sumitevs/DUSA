/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.mup;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumit_Saseendran
 */
public class ImageInventory extends javax.swing.JPanel {

    private CardLayout cl;
    private final Devices devices;
    private final Msis msis;
    private final Registrykeys registrykeys;
    private final SoftwareIdentityInstance softwareIdentityInstance;
    private ArrayList<ImageInventoryData> imageInventoryDataList;
    private ImageInventoryData imageInventoryData;
    private Image image;

    /**
     * Creates new form ImageInventory
     */
    public ImageInventory() {
        cl = new CardLayout();
        devices = new Devices();
        msis = new Msis();
        registrykeys = new Registrykeys();
        softwareIdentityInstance = new SoftwareIdentityInstance();
        imageInventoryDataList = new ArrayList<ImageInventoryData>();
        initComponents();
        jPanel1.setVisible(false);
        jComboBox1.addActionListener((ActionEvent ae) -> {
            if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("pnpIds")) {
                jPanel1.setVisible(true);
                cl.show(jPanel1, "1");
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("msis")) {
                jPanel1.setVisible(true);
                cl.show(jPanel1, "2");
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("registryKeys")) {
                jPanel1.setVisible(true);
                cl.show(jPanel1, "3");
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("softwareIdentityInstances")) {
                jPanel1.setVisible(true);
                cl.show(jPanel1, "4");
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("<select one>")) {
                jPanel1.setVisible(false);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jLabel1.setText("Select image");

        jList1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jList1.setModel(new DefaultListModel());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jLabel2.setText("Inventory method");

        jComboBox1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<select one>", " " }));
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);
        jPanel1.setLayout(cl);

        jButton1.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jButton1.setText("Save");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(devices,"1");
        jPanel1.add(msis,"2");
        jPanel1.add(registrykeys,"3");
        jPanel1.add(softwareIdentityInstance,"4");
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (jList1.getSelectedValue() != null) {
            jComboBox1.setEnabled(true);
            //checking through the table in Image(s) tab window and setting the inventory method combo box
            for (int row = 0; row < image.getjTable1().getRowCount(); row++) {
                if (jList1.getSelectedValue().toString().equalsIgnoreCase(image.getjTable1().getValueAt(row, 0).toString())) {
                    if (image.getjTable1().getValueAt(row, 1).toString().equalsIgnoreCase("DRVR")) {
                        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"<select one>", "pnpIds"}));
                    } else {
                        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"<select one>", "msis", "registryKeys", "softwareIdentityInstances"}));
                    }
                }
            }

            int flag = 0;
            for (ImageInventoryData item : imageInventoryDataList) {
                if (item.getImageName().contains(jList1.getSelectedValue().toString())) {
                    flag = 1;
                    if (item.getInventoryMethod().equalsIgnoreCase("pnpIds")) {
                        jComboBox1.setSelectedIndex(1);
                        jPanel1.setVisible(true);
                        devices.setjTable1(item.getTableData());
                        cl.show(jPanel1, "1");
                    } else if (item.getInventoryMethod().equalsIgnoreCase("msis")) {
                        jComboBox1.setSelectedIndex(1);
                        jPanel1.setVisible(true);
                        msis.setjTable1(item.getTableData());
                        cl.show(jPanel1, "2");
                    } else if (item.getInventoryMethod().equalsIgnoreCase("registryKeys")) {
                        jComboBox1.setSelectedIndex(2);
                        jPanel1.setVisible(true);
                        registrykeys.setjTable1(item.getTableData());
                        cl.show(jPanel1, "3");
                    } else if (item.getInventoryMethod().equalsIgnoreCase("softwareIdentityInstances")) {
                        jComboBox1.setSelectedIndex(3);
                        jPanel1.setVisible(true);
                        softwareIdentityInstance.setjTable1(item.getTableData());
                        cl.show(jPanel1, "4");
                    }
                    break;
                }
            }
            if (flag == 0) {
                jComboBox1.setSelectedIndex(0);
                jPanel1.setVisible(false);
            }
        } else {
            jComboBox1.setEnabled(false);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (!jComboBox1.getSelectedItem().toString().equalsIgnoreCase("<select one>")) {
            jButton1.setEnabled(true);
        } else {
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int flag = 0;
        //if update
        for (ImageInventoryData item : imageInventoryDataList) {
            if (item.getImageName().equalsIgnoreCase(jList1.getSelectedValue().toString())) {
                item.setInventoryMethod(jComboBox1.getSelectedItem().toString());
                if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("pnpIds")) {
                    item.setTableData(getTableData(devices.getjTable1()));
                    //make the change to all Driver images.
                    for (ImageInventoryData newItem : imageInventoryDataList) {
                        if (!newItem.getImageName().equalsIgnoreCase(jList1.getSelectedValue().toString()) && newItem.getInventoryMethod().equalsIgnoreCase("pnpIds")) {
                            newItem.setTableData(getTableData(devices.getjTable1()));
                        }
                    }
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("msis")) {
                    item.setTableData(getTableData(msis.getjTable1()));
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("registryKeys")) {
                    item.setTableData(getTableData(registrykeys.getjTable1()));
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("softwareIdentityInstances")) {
                    item.setTableData(getTableData(softwareIdentityInstance.getjTable1()));
                }
                flag = 1;
                break;
            }
        }
        //if first time entering details
        if (flag == 0) {
            imageInventoryData = new ImageInventoryData();
            imageInventoryData.setImageName(jList1.getSelectedValue().toString());
            imageInventoryData.setInventoryMethod(jComboBox1.getSelectedItem().toString());
            if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("pnpIds")) {
                imageInventoryData.setTableData(getTableData(devices.getjTable1()));
                //make the entery for all driver images
                for (int row = 0; row < image.getjTable1().getRowCount(); row++) {
                    if (!jList1.getSelectedValue().toString().equalsIgnoreCase(image.getjTable1().getValueAt(row, 0).toString()) && image.getjTable1().getValueAt(row, 1).toString().equalsIgnoreCase("DRVR")) {
                        ImageInventoryData newImageInventoryData = new ImageInventoryData();
                        newImageInventoryData.setImageName(image.getjTable1().getValueAt(row, 0).toString());
                        newImageInventoryData.setInventoryMethod(jComboBox1.getSelectedItem().toString());
                        newImageInventoryData.setTableData(getTableData(devices.getjTable1()));
                        imageInventoryDataList.add(newImageInventoryData);
                    }
                }
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("msis")) {
                imageInventoryData.setTableData(getTableData(msis.getjTable1()));
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("registryKeys")) {
                imageInventoryData.setTableData(getTableData(registrykeys.getjTable1()));
            } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("softwareIdentityInstances")) {
                imageInventoryData.setTableData(getTableData(softwareIdentityInstance.getjTable1()));
            }
            imageInventoryDataList.add(imageInventoryData);
        }
        jPanel1.setVisible(false);
        jComboBox1.setSelectedIndex(0);
        emptyTables();
    }//GEN-LAST:event_jButton1ActionPerformed

    public JList getjList1() {
        return jList1;
    }

    public Object[][] getTableData(JTable table) {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        int nRow = dtm.getRowCount(), nColMax = dtm.getColumnCount(),nCol=0;
        Object[][] tableData = new Object[nRow][];
        for (int i = 0; i < nRow; i++) {
            nCol=nColMax;
            //getting size of each row. Jagged array being created
            while(dtm.getValueAt(i,nCol-1).toString().isEmpty()){
                --nCol;
            }
            tableData[i] = new Object[nCol];
            for (int j = 0; j < nCol; j++) {
                tableData[i][j] = dtm.getValueAt(i, j);
            }
        }
        return tableData;
    }

    public ArrayList<ImageInventoryData> getImageInventoryDataList() {
        if (imageInventoryDataList == null) {
            imageInventoryDataList = new ArrayList<ImageInventoryData>();
        }
        return (ArrayList<ImageInventoryData>) imageInventoryDataList.clone();
    }
    
    public ArrayList<ImageInventoryData> setImageInventoryDataList() {
        if (imageInventoryDataList == null) {
            imageInventoryDataList = new ArrayList<ImageInventoryData>();
        }
        return imageInventoryDataList;
    }

    private void emptyTables() {
        DefaultTableModel tableModel = (DefaultTableModel) devices.getjTable1().getModel();
        tableModel.setRowCount(0);
        tableModel = (DefaultTableModel) msis.getjTable1().getModel();
        tableModel.setRowCount(0);
        tableModel = (DefaultTableModel) registrykeys.getjTable1().getModel();
        tableModel.setRowCount(0);
        tableModel = (DefaultTableModel) softwareIdentityInstance.getjTable1().getModel();
        tableModel.setRowCount(0);

    }

    void setImage(Image image) {
        if (this.image == null) {
            this.image = new Image(this);
        }
        this.image = image;
    }

    void clearField() {
        imageInventoryDataList.clear();
        DefaultListModel listModel = (DefaultListModel) jList1.getModel();
        listModel.removeAllElements();
        devices.clearField();
        msis.clearField();
        registrykeys.clearField();
        softwareIdentityInstance.clearField();
    }

    public Devices getDevices() {
        return devices;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
