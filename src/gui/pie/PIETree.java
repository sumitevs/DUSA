/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.pie;

import PIEXmlClasses.PayloadInfo;
import gui.Home;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Sumit_Saseendran
 */
public class PIETree extends javax.swing.JPanel {

    /**
     * Creates new form PIETree1
     * @param home
     */
   

    public PIETree(Home home) {
        this.home=new Home(home);
        this.home=home;
        initComponents();
        initScreens();
        this.home.getjPanel2().add(inventory,"28");
        this.home.getjPanel2().add(execution,"29");
        this.home.getjPanel2().add(pieRoot,"30");
        //home.getjPanel2().add(payload,"31");
        this.home.getjPanel2().add(payloadMain,"32");
        this.home.getjPanel2().add(unsupportedOS,"33");
        this.home.getjPanel2().add(featureSet,"34");
        this.home.getjPanel2().add(dependency,"35");
        this.home.getjPanel2().add(softDependency,"36");
        pieTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent tse) {
                String selected = tse.getPath().getLastPathComponent().toString();
                String parent = new String();
                if (!selected.equalsIgnoreCase("pie")) {
                    parent = tse.getPath().getParentPath().getLastPathComponent().toString();
                }
                switch (selected) {
                    case "PIE":
                        home.getCl().show(home.getjPanel2(), "30");
                        break;
                    case "Payload":
                        payloadMain.getjButton2().setVisible(false);
                        payloadMain.getjButton1().setVisible(true);
                        payloadMain.clearData();
                        home.getCl().show(home.getjPanel2(), "32");
                        break;
                    case "Inventory":
                        home.getCl().show(home.getjPanel2(), "28");
                        break;
                    case "Execution":
                        home.getCl().show(home.getjPanel2(), "29");
                        break;
                    case "UnsupportedOS":
                        home.getCl().show(home.getjPanel2(), "33");
                        break;
                    case "FeatureSet":
                        home.getCl().show(home.getjPanel2(), "34");
                        break;
                    case "Dependency":
                        home.getCl().show(home.getjPanel2(), "35");
                        break;
                    case "SoftDependency":
                        home.getCl().show(home.getjPanel2(), "36");
                        break;
                    default:
                        if (selected.contains("Part")) {
                            payloadMain.getjButton2().setVisible(true);
                            payloadMain.getjButton1().setVisible(false);
                            payloadMain.load(selected);
                            home.getCl().show(home.getjPanel2(), "32");
                            break;
                        }
                }
            }
        });
    }
    
    
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pieTree = new javax.swing.JTree();

        pieTree.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, new java.awt.Color(0, 0, 0)));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("PIE");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Payload");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Inventory");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Execution");
        javax.swing.tree.DefaultMutableTreeNode treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("UnsupportedOS");
        javax.swing.tree.DefaultMutableTreeNode treeNode6 = new javax.swing.tree.DefaultMutableTreeNode("FeatureSet");
        javax.swing.tree.DefaultMutableTreeNode treeNode7 = new javax.swing.tree.DefaultMutableTreeNode("Dependency");
        javax.swing.tree.DefaultMutableTreeNode treeNode8 = new javax.swing.tree.DefaultMutableTreeNode("SoftDependency");
        treeNode1.add(treeNode2);
        treeNode1.add(treeNode3);
        treeNode1.add(treeNode4);
        treeNode1.add(treeNode5);
        treeNode1.add(treeNode6);
        treeNode1.add(treeNode7);
        treeNode1.add(treeNode8);
        treeModel = new DefaultTreeModel(treeNode1);
        pieTree.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        pieTree.setModel(treeModel);
        pieTree.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pieTreePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(pieTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pieTreePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pieTreePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_pieTreePropertyChange

    public JTree getjTree1() {
        return pieTree;
    }

    public PieRoot getPieRoot() {
        return pieRoot;
    }

    public ExecutionMain getExecution() {
        return execution;
    }

    public InventoryMain getInventory() {
        return inventory;
    }

    public PayloadMain getPayloadMain() {
        return payloadMain;
    }

    public ListOS getUnsupportedOS() {
        return unsupportedOS;
    }

    public FeatureSet getFeatureSet() {
        return featureSet;
    }

    public Dependency getDependency() {
        return dependency;
    }

    public Dependency getSoftDependency() {
        return softDependency;
    }
    
    
    private PieRoot pieRoot;
    private ExecutionMain execution;
    private InventoryMain inventory;
    private PayloadMain payloadMain;
    private ListOS unsupportedOS;
    private FeatureSet featureSet;
    private Dependency dependency;
    private Dependency softDependency;
    private DefaultTreeModel treeModel;
    private Home home;
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree pieTree;
    // End of variables declaration//GEN-END:variables

    private void initScreens() {
        execution = new ExecutionMain();
        inventory = new InventoryMain();
        pieRoot = new PieRoot();
        payloadMain = new PayloadMain(pieTree);
        unsupportedOS = new ListOS();
        featureSet = new FeatureSet();
        dependency = new Dependency("Dependency Details");
        softDependency = new Dependency("Soft Dependency Details");
    }
}
